{"ast":null,"code":"var _jsxFileName = \"E:\\\\REACT\\\\contact-management-app\\\\src\\\\components\\\\ChartsMaps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\"; // Correct import for Chart.js\nimport moment from \"moment\"; // Correct import for Moment.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartsMaps = () => {\n  _s();\n  const [graphData, setGraphData] = useState({});\n  const [countriesData, setCountriesData] = useState([]);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\").then(response => response.json()).then(data => {\n      const casesData = data.timeline.cases;\n      const dates = Object.keys(casesData);\n      const cases = Object.values(casesData);\n      setGraphData({\n        labels: dates,\n        datasets: [{\n          label: \"Total Cases\",\n          data: cases,\n          fill: false,\n          borderColor: \"rgba(75,192,192,1)\",\n          borderWidth: 2\n        }]\n      });\n    }).catch(error => console.error(error));\n    fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => setCountriesData(data)).catch(error => console.error(error));\n  }, []);\n  const options = {\n    scales: {\n      x: {\n        type: \"time\",\n        // Use the \"time\" type for the x-axis\n        time: {\n          unit: \"day\",\n          // Display data by day\n          displayFormats: {\n            day: \"MMM D\" // Format for displaying dates (e.g., \"Jan 1\")\n          }\n        }\n      },\n\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  console.log(\"graphData:\", graphData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Worldwide COVID-19 Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: graphData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"COVID-19 Cases by Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [20, 0],\n      zoom: 2,\n      style: {\n        height: \"400px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), countriesData.map(country => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [country.countryInfo.lat, country.countryInfo.long],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: country.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Cases: \", country.cases]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Recovered: \", country.recovered]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Deaths: \", country.deaths]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, country.countryInfo._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartsMaps, \"StbfgD6KTmt1VSXQgvfKcrOghqw=\");\n_c = ChartsMaps;\nexport default ChartsMaps;\nvar _c;\n$RefreshReg$(_c, \"ChartsMaps\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Line","Chart","moment","jsxDEV","_jsxDEV","ChartsMaps","_s","graphData","setGraphData","countriesData","setCountriesData","fetch","then","response","json","data","casesData","timeline","cases","dates","Object","keys","values","labels","datasets","label","fill","borderColor","borderWidth","catch","error","console","options","scales","x","type","time","unit","displayFormats","day","y","beginAtZero","log","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","url","attribution","map","country","position","countryInfo","lat","long","recovered","deaths","_id","_c","$RefreshReg$"],"sources":["E:/REACT/contact-management-app/src/components/ChartsMaps.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Chart from \"chart.js/auto\"; // Correct import for Chart.js\r\nimport moment from \"moment\"; // Correct import for Moment.js\r\n\r\nconst ChartsMaps = () => {\r\n  const [graphData, setGraphData] = useState({});\r\n  const [countriesData, setCountriesData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const casesData = data.timeline.cases;\r\n        const dates = Object.keys(casesData);\r\n        const cases = Object.values(casesData);\r\n\r\n        setGraphData({\r\n          labels: dates,\r\n          datasets: [\r\n            {\r\n              label: \"Total Cases\",\r\n              data: cases,\r\n              fill: false,\r\n              borderColor: \"rgba(75,192,192,1)\",\r\n              borderWidth: 2,\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch((error) => console.error(error));\r\n\r\n    fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n      .then((response) => response.json())\r\n      .then((data) => setCountriesData(data))\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  const options = {\r\n    scales: {\r\n      x: {\r\n        type: \"time\", // Use the \"time\" type for the x-axis\r\n        time: {\r\n          unit: \"day\", // Display data by day\r\n          displayFormats: {\r\n            day: \"MMM D\", // Format for displaying dates (e.g., \"Jan 1\")\r\n          },\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n  console.log(\"graphData:\", graphData);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Worldwide COVID-19 Data</h2>\r\n      <Line data={graphData} options={options} />\r\n\r\n      <h2>COVID-19 Cases by Country</h2>\r\n      <MapContainer center={[20, 0]} zoom={2} style={{ height: \"400px\" }}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {countriesData.map((country) => (\r\n          <Marker\r\n            key={country.countryInfo._id}\r\n            position={[country.countryInfo.lat, country.countryInfo.long]}\r\n          >\r\n            <Popup>\r\n              <div>\r\n                <h3>{country.country}</h3>\r\n                <p>Total Cases: {country.cases}</p>\r\n                <p>Recovered: {country.recovered}</p>\r\n                <p>Deaths: {country.deaths}</p>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartsMaps;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}